#!/usr/bin/env bash

########################################################################################

# Utility name
APP="WEBKAOS Utils"

# Utility version
VER="1.1"

########################################################################################

NORM=0
BOLD=1
UNLN=4
RED=31
GREEN=32
BROWN=33
BLUE=34
MAG=35
CYAN=36
GREY=37

CL_NORM="\e[${NORM}m"
CL_RED="\e[0;${RED};49m"
CL_GREEN="\e[0;${GREEN};49m"
CL_BROWN="\e[0;${BROWN};49m"
CL_BLUE="\e[0;${BLUE};49m"
CL_MAG="\e[0;${MAG};49m"
CL_CYAN="\e[0;${CYAN};49m"
CL_GREY="\e[0;${GREY};49m"
CL_BL_RED="\e[1;${RED};49m"
CL_BL_GREEN="\e[1;${GREEN};49m"
CL_BL_BROWN="\e[1;${BROWN};49m"
CL_BL_BLUE="\e[1;${BLUE};49m"
CL_BL_MAG="\e[1;${MAG};49m"
CL_BL_CYAN="\e[1;${CYAN};49m"
CL_BL_GREY="\e[1;${GREY};49m"

########################################################################################

# Pattern used for generating temporary files and directories
TMP_PATTERN="/tmp/_wu.XXXXXXXXX"

########################################################################################

SUPPORTED_ARGS="!help !usage !version !ver"
SHORT_ARGS="h:!help v:!version"

########################################################################################

# Main functions
#
# *: All arguments passed to script
#
main() {
  if [[ $version || $ver ]] ; then
    about && exit 0
  fi

  if [[ $# -eq 0 || $help || $usage ]] ; then
    usage && exit 0
  fi

  local cmd="$1"

  shift 1

  case $cmd in
    "csr-gen")    genCSR $@    ;;
    "hpkp-gen")   genHPKPHeader $@ ;;
    "ocsp-gen")   genOCSP $@       ;;
    "ocsp-check") checkOCSP $@     ;;
    *) show "Unknown command $cmd" $RED
       doExit 1 ;;
  esac

  doExit 0
}

# Generate OCSP
#
# 1: Server cert or cert chain file (String)
# 2: Issuer cert (String) [Optional]
#
genOCSP() {
  local issuer_cert server_cert output

  if [[ $# -eq 0 ]] ; then
    usage && doExit 0
  fi

  if [[ ! -f $1 ]] ; then
    show "File $1 is not exist" $RED
    return 1
  fi

  if isChain "$1" ; then
    server_cert=$(extractCertFromChain "$1" 1)
    issuer_cert=$(extractCertFromChain "$1" 2)
    output=$(echo "$1" | sed 's/-chain//' | sed 's/.crt/.ocsp/')
  else
    server_cert="$1"
    issuer_cert="$2"
    output=$(echo "$1" | sed 's/.crt/.ocsp/')
  fi

  if [[ ! -f $server_cert ]] ; then
    show "Server certificate file $server_cert is not exist" $RED
    doExit 1
  fi

  if [[ ! -f $issuer_cert ]] ; then
    show "Issuer certificate file $issuer_cert is not exist" $RED
    doExit 1
  fi

  generateOCSPFile "$issuer_cert" "$server_cert" "$output"

  if [[ $? -ne 0 ]] ; then
    doExit 1
  fi
}

# Check OCSP stapling
#
# 1: Host and port (String)
#
checkOCSP() {
  if [[ $# -eq 0 ]] ; then
    usage && exit 0
  fi

  local host="$1"
  local servername="${2:-$host}"
  local tmp_file=$(mktemp -u $TMP_PATTERN)
  local status=$(openssl s_client -servername $servername -connect $host:443 -tls1 -tlsextdebug -status 2>&1 < /dev/null &> $tmp_file)

  if [[ $(grep 'OCSP Response Status: successful' $tmp_file) == "" ]] ; then
    show "OCSP Response Status: ${CL_RED}No response sent${CL_NORM}"
    doExit 1
  fi

  show "OCSP Response Status: ${CL_GREEN}Success${CL_NORM}"
  grep -A 14 'OCSP Response Data:' $tmp_file
}

# Generate signing request
#
# 1: Hostname (String)
#
# Code: None
# Echo: None
genCSR() {
  if [[ $# -eq 0 ]] ; then
    usage && doExit 0
  fi

  local host="$1"

  openssl req -new -newkey rsa:4096 -nodes -sha256 -keyout ${host}.key -out ${host}.csr
}

# Generate HPKP for some request
#
# 1: Path to csr file (String)
#
genHPKPHeader() {
  if [[ $# -eq 0 ]] ; then
    usage && doExit 0
  fi

  local main_file="$1"
  local backup_file="$2"

  local main_pin backup_pin

  if [[ ! -r $main_file ]] ; then
    show "File $main_file is not readable" $RED
    doExit 1
  fi

  main_pin=$(generateHPKHHash "$main_file")

  if [[ -n "$backup_file" ]] ; then
    backup_pin=$(generateHPKHHash "$backup_file")
  fi

  if [[ -z "$main_pin" ]] ; then
    show "Can't generate HPKP for given request" $RED
    doExit 1
  fi

  show "\n${CL_BL_GREEN}HPKP Header successfully generated!${CL_GREEN} Add this header as part of your config file.${CL_NORM}"

  if [[ -z "$backup_pin" ]] ; then
    show "\nadd_header Public-Key-Pins 'pin-sha256=\"$main_pin\";max-age=86400';\n"
  else
    show "\nadd_header Public-Key-Pins 'pin-sha256=\"$main_pin\";pin-sha256=\"$backup_pin\";max-age=86400';\n"
  fi

  show "More info: https://developer.mozilla.org/en-US/docs/Web/Security/Public_Key_Pinning\n" $GREY
}

########################################################################################

# Generate OCSP file
#
# 1: Path to server certificate (String)
# 2: Path to issuer certificate (String)
# 3: Output name (String) [Optional]
#
# Code: Yes
generateOCSPFile() {
  local issuer_cert="$1"
  local server_cert="$2"
  local output="$3"

  local url=$(openssl x509 -in $server_cert -text | grep "OCSP - URI:" | cut -d: -f2,3)

  openssl ocsp -noverify -no_nonce -respout $output -issuer $issuer_cert -cert $server_cert -url $url &> /dev/null

  if [[ $? -ne 0 ]] ; then
    show "Error while OCSP stapling file generation" $RED
    return 1
  fi

  show "OCSP stapling file saved as $output" $GREEN

  return 0
}

# Generate HPKP hash from given file
#
# 1: Key / CRT / CSR file
#
# Code: No
# Echo: Hash (String)
generateHPKHHash() {
  local file="$1"

  if [[ $file == *.key ]] ; then
    openssl rsa -in $file -outform der -pubout 2>/dev/null | openssl dgst -sha256 -binary | openssl enc -base64
  elif [[ $file == *.csr ]] ; then
    openssl req -in $file -pubkey -noout 2>/dev/null | openssl rsa -pubin -outform der 2>/dev/null | openssl dgst -sha256 -binary | openssl enc -base64
  elif [[ $file == *.crt ]] ; then
    openssl x509 -in $file -pubkey -noout 2>/dev/null | openssl rsa -pubin -outform der 2>/dev/null | openssl dgst -sha256 -binary | openssl enc -base64
  else
    echo ""
  fi
}

# Check if given file is chain
#
# 1: Path to file (String)
#
# Code: Yes
isChain() {
  local file="$1"

  [[ ! -f $file ]] && return 1

  if [[ $(cat $file | grep "BEGIN CERTIFICATE" | wc -l) -le 1 ]] ; then
    return 1
  fi

  return 0
}

# Extract certificate from chain to file
#
# 1: Path to chain file (String)
# 2: Number of certificate in chain (Number)
#
# Echo: Path to temporary file with certificate (String)
extractCertFromChain() {
  local chain="$1"
  local cert_num="$2"

  local cert_start=$(grep -n "BEGIN CERTIFICATE" $chain | cut -f1 -d: | sed -n ${cert_num}p)
  local cert_end=$(grep -n "END CERTIFICATE" $chain | cut -f1 -d: | sed -n ${cert_num}p)

  if [[ -z "$cert_start" || -z "$cert_end" ]] ; then
    return
  fi

  local tmp_file=$(mktemp -u $TMP_PATTERN)

  cat $chain | sed -n ${cert_start},${cert_end}p > $tmp_file

  echo $tmp_file
}

# Remove temporary data and exit with given exit code
#
# 1: Exit code (Number) [Optional]
#
doExit() {
  local ec="${1:-0}"

  rm -f "${TMP_PATTERN//XXXXXXXXX/}*"

  exit $ec
}

########################################################################################

show() {
  if [[ -n "$2" ]] ; then
    echo -e "\e[${2}m${1}${CL_NORM}"
  else
    echo -e "$@"
  fi
}

usage() {
  show ""
  show "${CL_BOLD}Usage:${CL_NORM} webkaos-utils ${CL_BROWN}command${CL_NORM} args..."
  show ""
  show "Commands" $BOLD
  show ""
  show "  ${CL_BROWN}csr-gen${CL_NORM} ${CL_GREY}host${CL_NORM}                         Generate RSA key and a certificate signing request"
  show "  ${CL_BROWN}hpkp-gen${CL_NORM} ${CL_GREY}csr|key|crt backup${CL_NORM}          Generate HTTP public key pinning (HPKP) header"
  show "  ${CL_BROWN}ocsp-gen${CL_NORM} ${CL_GREY}server-cert${CL_NORM} ${CL_GREY}issuer-cert${CL_NORM}     Generate OCSP stapling file"
  show "  ${CL_BROWN}ocsp-check${CL_NORM} ${CL_GREY}host${CL_NORM}                      Check OCSP response status for some host"
  show ""
  show "Options" $BOLD
  show ""
  show "  ${CL_GREEN}--help, -h${CL_NORM}                      Show this help message"
  show "  ${CL_GREEN}--version, -v${CL_NORM}                   Show information about version"
  show ""
}

about() {
  show ""
  show "${CL_BL_CYAN}$APP${CL_NORM} ${CL_CYAN}$VER${CL_NORM} - Helpers for working with webkaos server"
  show ""
  show "Copyright (C) 2009-2016 ESSENTIAL KAOS" $GREY
  show "Essential Kaos Open Source License <https://essentialkaos.com/ekol?en>" $GREY
  show ""
}

showArgWarn() {
  show "Unknown argument $1." $RED
  exit 1
}

## ARGUMENTS PARSING 2 #################################################################

[[ $# -eq 0 ]] && main && exit $?

unset arg argn argm argv argt argk

argv="$*" ; argt=""

while [[ -n "$1" ]] ; do
  if [[ "$1" =~ \  && -n "$argn" ]] ; then
    declare $argn="$1"

    unset argn && shift && continue
  elif [[ $1 =~ ^-{1}[a-zA-Z0-9]{1,2}+.*$ ]] ; then
    argm=${1:1}

    if [[ \ $SHORT_ARGS\  =~ \ $argm:!?([a-zA-Z0-9_]*) ]] ; then
      arg="${BASH_REMATCH[1]}"
    else
      showArgWarn "-$argm" 2> /dev/null || :
      shift && continue
    fi

    if [[ -z "$argn" ]] ; then
      argn=$arg
    else
      [[ -z "$argk" ]] && ( showArgValWarn "--$argn" 2> /dev/null || : ) || declare $argn=true
      argn=$arg
    fi

    if [[ ! $SUPPORTED_ARGS\  =~ !?$argn\  ]] ; then
      showArgWarn "-$argm" 2> /dev/null || :
      shift && continue
    fi

    if [[ ${BASH_REMATCH[0]:0:1} == "!" ]] ; then
      declare $argn=true ; unset argn ; argk=true
    else
      unset argk
    fi

    shift && continue
  elif [[ "$1" =~ ^-{2}[a-zA-Z]{1}[a-zA-Z0-9_-]+.*$ ]] ; then
    arg=${1:2}

    if [[ $arg == *=* ]] ; then
      IFS="=" read -ra arg <<< "$arg"

      argm="${arg[0]}" ; argm=${argm//-/_}

      if [[ ! $SUPPORTED_ARGS\  =~ $argm\  ]] ; then
        showArgWarn "--${arg[0]//_/-}" 2> /dev/null || :
        shift && continue
      fi

      [[ -n "${!argm}" && $MERGEABLE_ARGS\  =~ $argm\  ]] && declare $argm="${!argm} ${arg[@]:1:99}" || declare $argm="${arg[@]:1:99}"

      unset argm && shift && continue
    else
      arg=${arg//-/_}

      if [[ -z "$argn" ]] ; then
        argn=$arg
      else
        [[ -z "$argk" ]] && ( showArgValWarn "--$argn" 2> /dev/null || : ) || declare $argn=true
        argn=$arg
      fi

      if [[ ! $SUPPORTED_ARGS\  =~ !?$argn\  ]] ; then
        showArgWarn "--${argn//_/-}" 2> /dev/null || :
        shift && continue
      fi

      if [[ ${BASH_REMATCH[0]:0:1} == "!" ]] ; then
        declare $argn=true ; unset argn ; argk=true
      else
        unset argk
      fi

      shift && continue
    fi
  else
    if [[ -n "$argn" ]] ; then
      [[ -n "${!argn}" && $MERGEABLE_ARGS\  =~ $argn\  ]] && declare $argn="${!argn} $1" || declare $argn="$1"

      unset argn && shift && continue
    fi
  fi

  argt="$argt $1" ; shift

done

[[ -n "$argn" ]] && declare $argn=true

unset arg argn argm argk

[[ -n "$KEEP_ARGS" ]] && main $argv || main ${argt:1:9999}

########################################################################################
