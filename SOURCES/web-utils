#!/usr/bin/env bash
# shellcheck disable=SC1117,SC2034,SC2154

################################################################################

if [[ -n "${SCRIPT_DEBUG}" ]] ; then
  set -x
fi

################################################################################

# Utility name
APP="WEB Utils"

# Utility version
VER="2.2.0"

################################################################################

NORM=0
BOLD=1
UNLN=4
RED=31
GREEN=32
YELLOW=33
BLUE=34
MAG=35
CYAN=36
GREY=37
DARK=90

CL_NORM="\e[0m"
CL_BOLD="\e[0;${BOLD};49m"
CL_UNLN="\e[0;${UNLN};49m"
CL_RED="\e[0;${RED};49m"
CL_GREEN="\e[0;${GREEN};49m"
CL_YELLOW="\e[0;${YELLOW};49m"
CL_BLUE="\e[0;${BLUE};49m"
CL_MAG="\e[0;${MAG};49m"
CL_CYAN="\e[0;${CYAN};49m"
CL_GREY="\e[0;${GREY};49m"
CL_DARK="\e[0;${DARK};49m"
CL_BL_RED="\e[1;${RED};49m"
CL_BL_GREEN="\e[1;${GREEN};49m"
CL_BL_YELLOW="\e[1;${YELLOW};49m"
CL_BL_BLUE="\e[1;${BLUE};49m"
CL_BL_MAG="\e[1;${MAG};49m"
CL_BL_CYAN="\e[1;${CYAN};49m"
CL_BL_GREY="\e[1;${GREY};49m"

################################################################################

# Pattern used for generating temporary files and directories (String)
TMP_PATTERN="/tmp/_wu.XXXXXXXXX"

# Default RSA key length (Number)
RSA_SIZE=2048

# Default ECC key length (Number)
ECC_SIZE=256

# Minimal RSA size (Number)
MIN_RSA_SIZE=2048

# Maximum RSA size (Number)
MAX_RSA_SIZE=8192

# Minimal ECC size (Number)
MIN_ECC_SIZE=256

# Maximum ECC size (Number)
MAX_ECC_SIZE=384

################################################################################

SUPPORTED_OPTS="!ecc size !help !usage !version !ver !no_colors"
SHORT_OPTS="E:!ecc s:size h:!help v:!version nc:!no_colors"

################################################################################

# Main functions
#
# *: All arguments passed to script
#
# Code: No
# Echo: No
main() {
  if [[ ! -t 1 || -n "$no_colors" || -n "$NO_COLOR" ]] ; then
    unset NORM BOLD UNLN RED GREEN YELLOW BLUE MAG CYAN GREY DARK
    unset CL_NORM CL_BOLD CL_UNLN CL_RED CL_GREEN CL_YELLOW CL_BLUE CL_MAG CL_CYAN CL_GREY CL_DARK
    unset CL_BL_RED CL_BL_GREEN CL_BL_YELLOW CL_BL_BLUE CL_BL_MAG CL_BL_CYAN CL_BL_GREY CL_BL_DARK
  fi

  if [[ -n "$version" || -n "$ver" ]] ; then
    about
    exit 0
  fi

  if [[ $# -eq 0 || -n "$help" || -n "$usage" ]] ; then
    usage
    exit 0
  fi

  trap sigExitTrap SIGINT SIGQUIT SIGTERM

  local cmd="$1"

  shift 1

  case $cmd in
    "csr-gen")        genCSR "$@"        ;;
    "csr-info")       showCSR "$@"       ;;
    "csr-config-gen") genCSRConfig "$@"  ;;
    "crt-info")       showCRT "$@"       ;;
    "hpkp-gen")       genHPKPHeader "$@" ;;
    "ocsp-gen")       genOCSP "$@"       ;;
    "ocsp-check")     checkOCSP "$@"     ;;
    "0rtt-check")     checkRTT "$@"      ;;
    "htpasswd")       genHTPasswd "$@"   ;;
    *) error "Unknown command ${CL_BL_RED}${cmd}${CL_RED}"
       doExit 1 ;;
  esac

  doExit 0
}

# Generate signing request
#
# 1: Domain or config file (String)
#
# Code: No
# Echo: No
genCSR() {
  if [[ $# -eq 0 ]] ; then
    usage && doExit 0
  fi

  if [[ -e "$1" && -r "$1" ]] ; then
    generateCRSFromConfig "$@"
  else
    generateCRSInteractive "$@"
  fi
}


# Print info about CSR file
#
# 1: CSR file (String)
#
# Code: No
# Echo: No
showCSR() {
  if [[ $# -eq 0 ]] ; then
    usage && doExit 0
  fi

  local csr="$1"

  if [[ ! -e "$csr" ]] ; then
    error "CSR file ${CL_BL_RED}${csr}${CL_RED} does not exist"
    doExit 1
  fi

  if [[ ! -r "$csr" ]] ; then
    error "CSR file ${CL_BL_RED}${csr}${CL_RED} is not readable"
    doExit 1
  fi

  if ! grep -q '\-BEGIN CERTIFICATE REQUEST\-' "$csr" ; then
    error "${CL_BL_RED}${csr}${CL_RED} is not a certificate signing request file"
    doExit 1
  fi

  local tmp_file subject country state city company section domain email
  local algorithm key_size key_info

  tmp_file=$(createTempFile)

  openssl req -noout -text -in "$csr" > "$tmp_file"

  # shellcheck disable=SC2181
  if [[ $? -ne 0 ]] ; then
    error "Error while reading CSR file"
    doExit 1
  fi

  subject=$(grep 'Subject:' "$tmp_file" | cut -f1 -d':' | sed 's/^ \+//')
  country=$(echo "$subject" | cut -f1 -d',' | cut -f2 -d'=' | sed 's/^ \+//')
  state=$(echo "$subject" | cut -f2 -d',' | cut -f2 -d'=' | sed 's/^ \+//')
  city=$(echo "$subject" | cut -f3 -d',' | cut -f2 -d'=' | sed 's/^ \+//')
  company=$(echo "$subject" | cut -f4 -d',' | cut -f2 -d'=' | sed 's/^ \+//')
  section=$(echo "$subject" | cut -f5 -d',' | cut -f2 -d'=' | sed 's/^ \+//')
  domain=$(echo "$subject" | cut -f6 -d',' | cut -f2 -d'=' | cut -f1 -d"/" | sed 's/^ \+//')
  email=$(echo "$subject" | cut -f6 -d',' | cut -f3 -d'=' | sed 's/^ \+//')
  key_algo=$(grep 'Public Key Algorithm:' "$tmp_file" | cut -f2 -d':' | tr -d ' ')
  key_size=$(grep 'Public-Key:' "$tmp_file" | cut -f2 -d':')

  if [[ "$key_algo" == "id-ecPublicKey" ]] ; then
    key_info="ECC${CL_GREY}${key_size}${CL_NORM}"
  else
    key_info="RSA${CL_GREY}${key_size}${CL_NORM}"
  fi

  show ""
  show "${CL_BOLD}Key:${CL_NORM}                   ${key_info:---empty--}"
  show "${CL_BOLD}Common name (domain):${CL_NORM}  ${domain:---empty--}"
  show "${CL_BOLD}Email address:${CL_NORM}         ${email:---empty--}"
  show "${CL_BOLD}Country code:${CL_NORM}          ${country:---empty--}"
  show "${CL_BOLD}State or province:${CL_NORM}     ${state:---empty--}"
  show "${CL_BOLD}Locality:${CL_NORM}              ${city:---empty--}"
  show "${CL_BOLD}Organization:${CL_NORM}          ${company:---empty--}"
  show "${CL_BOLD}Organizational unit:${CL_NORM}   ${section:---empty--}"
  show ""
}

# Show information from CRT file
#
# 1: Path to CRT file (String)
#
# Code: No
# Echo: Yes
showCRT() {
  if [[ $# -eq 0 ]] ; then
    usage && doExit 0
  fi

  local crt="$1"

  if [[ ! -e "$crt" ]] ; then
    error "CRT file ${CL_BL_RED}${crt}${CL_RED} does not exist"
    doExit 1
  fi

  if [[ ! -r "$crt" ]] ; then
    error "CRT file ${CL_BL_RED}${crt}${CL_RED} is not readable"
    doExit 1
  fi

  if ! grep -q '\-BEGIN CERTIFICATE\-' "$crt" ; then
    error "${CL_BL_RED}${crt}${CL_RED} is not a certificate file"
    doExit 1
  fi

  local tmp_file issuer subject alt_names
  local sig_algo key_algo key_size
  local valid_before valid_after valid_after_dt valid_before_dt
  local now valid_before_ts valid_days

  tmp_file=$(createTempFile)

  openssl x509 -text -noout -in "$crt" > "$tmp_file"

  # shellcheck disable=SC2181
  if [[ $? -ne 0 ]] ; then
    error "Error while reading CRT file"
    doExit 1
  fi

  subject=$(grep 'Subject:' "$tmp_file" | cut -f2 -d'=' | sed 's/^ \+//')
  issuer=$(grep 'Issuer:' "$tmp_file" | head -1 | cut -f2 -d':' | sed 's/^ \+//' | sed 's/, / \/ /g' | sed 's/\w\w\?=//g')
  alt_names=$(grep -A1 'Subject Alternative Name:' "$tmp_file" | tail -1 | sed 's/^ \+//' | sed 's/DNS://g' | tr -d ',')
  valid_after=$(grep 'Not Before:' "$tmp_file" | cut -f2-99 -d':' | sed 's/^ \+//')
  valid_before=$(grep 'Not After :' "$tmp_file" | cut -f2-99 -d':' | sed 's/^ \+//')
  sig_algo=$(grep 'Signature Algorithm:' "$tmp_file" | head -1 | cut -f2 -d':' | sed 's/^ \+//')
  key_algo=$(grep 'Public Key Algorithm:' "$tmp_file" | cut -f2 -d':' | sed 's/^ \+//')
  key_size=$(grep 'Public-Key:' "$tmp_file" | cut -f2 -d':')

  if [[ "$key_algo" == "id-ecPublicKey" ]] ; then
    key_info="ECC${CL_GREY}${key_size}${CL_NORM}"
  else
    key_info="RSA${CL_GREY}${key_size}${CL_NORM}"
  fi

  now=$(date +'%s')
  valid_after_dt=$(date --date="$valid_after" +'%Y/%m/%d %H:%M')
  valid_before_dt=$(date --date="$valid_before" +'%Y/%m/%d %H:%M')
  valid_before_ts=$(date --date="$valid_before" +'%s')
  valid_days=$(( (valid_before_ts - now) / 86400 ))

  if [[ $valid_days -ge 0 ]] ; then
    valid_before_dt="$valid_before_dt ${CL_GREY}($valid_days days)${CL_NORM}"
  fi

  show ""
  show "${CL_BOLD}Key:${CL_NORM}                  ${key_info:---empty--}"
  show "${CL_BOLD}Subject:${CL_NORM}              ${subject:---empty--}"
  show "${CL_BOLD}Alt Names:${CL_NORM}            ${alt_names:---empty--}"
  show "${CL_BOLD}Issuer:${CL_NORM}               ${issuer:---empty--}"
  show "${CL_BOLD}Signature Algorithm:${CL_NORM}  ${sig_algo:---empty--}"
  show "${CL_BOLD}Valid after:${CL_NORM}          ${valid_after_dt:---empty--}"
  show "${CL_BOLD}Valid before:${CL_NORM}         ${valid_before_dt:---empty--}"
  show ""
}

# Generate OpenSSL config for CSR generation
#
# 1: Output file (String)
#
# Code: No
# Echo: No
genCSRConfig() {
  if [[ $# -eq 0 ]] ; then
    usage && doExit 0
  fi

  local domain="$1"
  local host tmp_file domain email country state city company section

  host=$(formatHostName "$1")
  tmp_file=$(createTempFile)

  createOpenSSLConfigTemplate "$tmp_file"

  show ""

  read -r -e -p "Email Address: " email
  read -r -e -p "Country Code (XX): " country
  read -r -e -p "State or Province: " state
  read -r -e -p "Locality (city): " city
  read -r -e -p "Organization (company): " company
  read -r -e -p "Organizational Unit (section): " section

  sed -i "s/%DOMAIN%/$domain/" "$tmp_file"
  sed -i "s/%EMAIL%/$email/" "$tmp_file"
  sed -i "s/%COUNTRY%/$country/" "$tmp_file"
  sed -i "s/%STATE%/$state/" "$tmp_file"
  sed -i "s/%CITY%/$city/" "$tmp_file"
  sed -i "s/%COMPANY%/$company/" "$tmp_file"
  sed -i "s/%SECTION%/$section/" "$tmp_file"

  show ""

  cat "$tmp_file" > "${host}.cnf"
  chmod 0600 "${host}.cnf"

  show "Configuration file created as ${host}.cnf" $GREEN
}

# Generate OCSP
#
# 1: Server cert or cert chain file (String)
# 2: Issuer cert (String) [Optional]
#
# Code: No
# Echo: No
genOCSP() {
  local issuer_cert server_cert output

  if [[ $# -eq 0 ]] ; then
    usage && doExit 0
  fi

  if [[ ! -f "$1" ]] ; then
    error "File ${CL_BL_RED}${1}${CL_RED} does not exist"
    doExit 1
  fi

  if isChain "$1" ; then
    server_cert=$(extractCertFromChain "$1" 1)
    issuer_cert=$(extractCertFromChain "$1" 2)
    output=$(echo "$1" | sed 's/-chain//' | sed 's/.crt/.ocsp/')
  else
    server_cert="$1"
    issuer_cert="$2"
    output="${1/.crt/.ocsp}"
  fi

  if [[ ! -f "$server_cert" ]] ; then
    error "Server certificate file ${CL_BL_RED}${server_cert}${CL_RED} is not exist"
    doExit 1
  fi

  if [[ ! -f "$issuer_cert" ]] ; then
    error "Issuer certificate file ${CL_BL_RED}${issuer_cert}${CL_RED} is not exist"
    doExit 1
  fi

  if ! generateOCSPFile "$issuer_cert" "$server_cert" "$output" ; then
    doExit 1
  fi
}

# Check OCSP stapling
#
# 1: Host (String)
# 2: Server name (String) [Optional]
#
# Code: No
# Echo: No
checkOCSP() {
  if [[ $# -eq 0 ]] ; then
    usage && exit 0
  fi

  local host server_name tmp_file status

  host="$1"
  server_name="${2:-$host}"
  tmp_file=$(createTempFile)
  status=$(openssl s_client -servername "$server_name" -connect "$host:443" -tls1 -tlsextdebug -status 2>&1 < /dev/null &> "$tmp_file")

  if [[ $(grep 'OCSP Response Status: successful' "$tmp_file") == "" ]] ; then
    show "OCSP Response Status: ${CL_RED}No response sent${CL_NORM}"
    doExit 1
  fi

  show "OCSP Response Status: ${CL_GREEN}Success${CL_NORM}"
  grep -A 14 'OCSP Response Data:' "$tmp_file"
}

# Checks 0-RTT support
#
# 1: Host (String)
# 2: Server name (String) [Optional]
#
# Code: No
# Echo: No
checkRTT() {
  if [[ $# -eq 0 ]] ; then
    usage && exit 0
  fi

  if ! isProtocolSupported "TLSv1.3" ; then
    error "Installed OpenSSL version doesn't support TLS 1.3"
    exit 1
  fi

  local host req_temp status

  host="$1"
  server_name="${2:-$host}"
  req_temp=$(createTempFile)
  ses_temp=$(createTempFile)

  echo -e "GET / HTTP/1.1\r\nHost: ${server_name}\r\nConnection: close\r\n\r\n" > "$req_temp"

  openssl s_client -servername "$server_name" -connect "${host}:443" -tls1_3 -sess_out "$ses_temp" -ign_eof < "$req_temp" &> /dev/null

  sleep 0.1

  status=$(openssl s_client -servername "$server_name" -connect "${host}:443" -tls1_3 -sess_in "$ses_temp" -early_data "$req_temp" <<< "Q" 2>&1 | grep 'Early data was ')

  if [[ "$status" == "Early data was accepted" ]] ; then
    show "0-RTT Status: ${CL_GREEN}$status${CL_NORM}"
  else
    show "0-RTT Status: ${CL_RED}${status:-Not supported}${CL_NORM}"
  fi
}

# Generate record with MD5 password hash for .htpasswd
#
# 1: User name (String)
# 2: Password (String)
#
# Code: No
# Echo: No
genHTPasswd() {
  if [[ $# -lt 2 ]] ; then
    usage && exit 0
  fi

  local user="$1"
  local password="$2"

  echo "$user:$(openssl passwd -apr1 "$password")"
}

# Generate HPKP for some request
#
# 1: Path to csr file (String)
#
genHPKPHeader() {
  if [[ $# -eq 0 ]] ; then
    usage && doExit 0
  fi

  local main_file backup_file main_pin backup_pin

  main_file="$1"
  backup_file="$2"

  if [[ ! -r "$main_file" ]] ; then
    error "File ${CL_BL_RED}${main_file}${CL_RED} is not readable"
    doExit 1
  fi

  main_pin=$(generateHPKHHash "$main_file")

  if [[ -n "$backup_file" ]] ; then
    backup_pin=$(generateHPKHHash "$backup_file")
  fi

  if [[ -z "$main_pin" ]] ; then
    error "Can't generate HPKP for given request"
    doExit 1
  fi

  show "\n${CL_BL_GREEN}HPKP Header successfully generated!${CL_GREEN} Add this header as part of your config file.${CL_NORM}"

  if [[ -z "$backup_pin" ]] ; then
    show "\nadd_header Public-Key-Pins 'pin-sha256=\"$main_pin\";max-age=86400';\n"
  else
    show "\nadd_header Public-Key-Pins 'pin-sha256=\"$main_pin\";pin-sha256=\"$backup_pin\";max-age=86400';\n"
  fi

  show "More info: https://developer.mozilla.org/en-US/docs/Web/Security/Public_Key_Pinning\n" $DARK
}

################################################################################

# Generate OCSP file
#
# 1: Path to server certificate (String)
# 2: Path to issuer certificate (String)
# 3: Output name (String) [Optional]
#
# Code: Yes
# Echo: No
generateOCSPFile() {
  local issuer_cert server_cert output url

  issuer_cert="$1"
  server_cert="$2"
  output="$3"

  url=$(openssl x509 -in "$server_cert" -text | grep "OCSP - URI:" | cut -d: -f2,3)

  openssl ocsp -noverify -no_nonce -respout "$output" -issuer "$issuer_cert" -cert "$server_cert" -url "$url" &> /dev/null

  # shellcheck disable=SC2181
  if [[ $? -ne 0 ]] ; then
    error "Error while OCSP stapling file generation"
    doExit 1
  fi

  chmod 600 "$output"

  show "OCSP stapling file saved as $output" $GREEN
}

# Generate CSR based on info from given OpenSSL configuration file
#
# 1: Path to config (String)
#
# Code: Yes
# Echo: No
generateCRSFromConfig() {
  local config="$1"
  local host

  checkKeyLength

  host=$(grep 'DOMAIN = ' "$config" | cut -f2 -d'=' | tr -d ' "')

  if [[ -z "$host" ]] ; then
    error "Can't read domain from configuration file"
    doExit 1
  fi

  host=$(formatHostName "$host")

  if [[ -z "$ecc" ]] ; then
    openssl req -new -config "$config" -newkey "rsa:${size:-$RSA_SIZE}" -nodes -sha256 -keyout "${host}.key" -out "${host}.csr" &> /dev/null
  else
    openssl ecparam -name "$(getECCCurveName)" -genkey -out "${host}.key" &> /dev/null
    openssl req -new -config "$config" -key "${host}.key" -out "${host}.csr" &> /dev/null
  fi

   # shellcheck disable=SC2181
  if [[ $? -ne 0 ]] ; then
    error "Error while CSR file generation"
    doExit 1
  fi

  chmod 600 "${host}.key" "${host}.csr"

  show "Certificate Signing Request successfully generated as ${host}.csr (key: ${host}.key)" $GREEN
}

# Generate CSR in interactive mode
#
# 1: Domain (String)
#
# Code: Yes
# Echo: No
generateCRSInteractive() {
  local domain="$1"
  local host

  checkKeyLength

  host=$(formatHostName "$1")

  if [[ -z "$ecc" ]] ; then
    openssl req -new -newkey "rsa:${size:-$RSA_SIZE}" -nodes -sha256 -keyout "${host}.key" -out "${host}.csr"
  else
    openssl ecparam -name "$(getECCCurveName)" -genkey -out "${host}.key"
    openssl req -new -key "${host}.key" -out "${host}.csr"
  fi

  # shellcheck disable=SC2181
  if [[ $? -ne 0 ]] ; then
    error "Error while CSR file generation"
    doExit 1
  fi

  chmod 600 "${host}.key" "${host}.csr"

  show ""
  show "Certificate Signing Request successfully generated as ${host}.csr (key: ${host}.key)" $GREEN
}

# Generate HPKP hash from given file
#
# 1: Key / CRT / CSR file
#
# Code: No
# Echo: Hash (String)
generateHPKHHash() {
  local file="$1"

  if [[ "$file" == *.key ]] ; then
    openssl rsa -in "$file" -outform der -pubout 2>/dev/null | openssl dgst -sha256 -binary | openssl enc -base64
  elif [[ "$file" == *.csr ]] ; then
    openssl req -in "$file" -pubkey -noout 2>/dev/null | openssl rsa -pubin -outform der 2>/dev/null | openssl dgst -sha256 -binary | openssl enc -base64
  elif [[ "$file" == *.crt ]] ; then
    openssl x509 -in "$file" -pubkey -noout 2>/dev/null | openssl rsa -pubin -outform der 2>/dev/null | openssl dgst -sha256 -binary | openssl enc -base64
  else
    echo ""
  fi
}

# Check if given file is chain
#
# 1: Path to file (String)
#
# Code: Yes
# Echo: No
isChain() {
  local file="$1"

  [[ ! -f $file ]] && return 1

  if [[ $(grep -c "BEGIN CERTIFICATE" "$file") -le 1 ]] ; then
    return 1
  fi

  return 0
}

# Extract certificate from chain to file
#
# 1: Path to chain file (String)
# 2: Number of certificate in chain (Number)
#
# Code: No
# Echo: Path to temporary file with certificate (String)
extractCertFromChain() {
  local chain cert_num cert_start cert_end tmp_file

  chain="$1"
  cert_num="$2"

  cert_start=$(grep -n "BEGIN CERTIFICATE" "$chain" | cut -f1 -d: | sed -n "${cert_num}p")
  cert_end=$(grep -n "END CERTIFICATE" "$chain" | cut -f1 -d: | sed -n "${cert_num}p")

  if [[ -z "$cert_start" || -z "$cert_end" ]] ; then
    return
  fi

  tmp_file=$(createTempFile)

  sed -n "${cert_start},${cert_end}p" < "$chain" > "$tmp_file"

  echo "$tmp_file"
}

# Create OpenSSL configuration file template
#
# 1: Path to file (String)
#
# Code: No
# Echo: No
createOpenSSLConfigTemplate() {
  local file="$1"

cat << EOF > "$file"
# ############################################################################ #
#                OpenSSL configuration file for CSR generation                 #
# ############################################################################ #

# Common Name (eg, your name or your server's hostname)
DOMAIN = "%DOMAIN%"

# Email Address
EMAIL = "%EMAIL%"

# Country Name (2 letter code)
COUNTRY = "%COUNTRY%"

# State or Province Name (full name)
STATE = "%STATE%"

# Locality Name (eg, city)
CITY = "%CITY%"

# Organization Name (eg, company)
COMPANY = "%COMPANY%"

# Organizational Unit Name (eg, section)
SECTION = "%SECTION%"

# ##################### NO MODIFICATIONS REQUIRED BELOW ###################### #

[ req ]
prompt = no
encrypt_key = no
distinguished_name = dn

[ dn ]
C = \$COUNTRY
ST = \$STATE
L = \$CITY
O = \$COMPANY
OU = \$SECTION
CN = \$DOMAIN
emailAddress = \$EMAIL

EOF
}

# Formats host name
#
# 1: Domain (String)
#
# Code: No
# Echo: Formatted name (String)
formatHostName() {
  echo "$1" | sed 's/\*\./wildcard-/g' | sed 's/\./_/g'
}

# Checks key size
#
# Code: No
# Echo: No
checkKeyLength() {
  if [[ -z "$size" ]] ; then
    return
  fi

  if [[ -n "$ecc" && $size -lt $MIN_ECC_SIZE ]] ; then
    error "ECC key size is too small ($size < $MIN_ECC_SIZE)"
    doExit 1
  fi

  if [[ -n "$ecc" && $size -gt $MAX_ECC_SIZE ]] ; then
    error "ECC key size is too big ($size > $MAX_ECC_SIZE)"
    doExit 1
  fi

  if [[ -z "$ecc" && $size -lt $MIN_RSA_SIZE ]] ; then
    error "RSA key size is too small ($size < $MIN_RSA_SIZE)"
    doExit 1
  fi

  if [[ -z "$ecc" && $size -gt $MAX_RSA_SIZE ]] ; then
    error "RSA key size is too big ($size > $MAX_RSA_SIZE)"
    doExit 1
  fi
}

# Returns curve name for ECC certificate
#
# Code: No
# Echo: Curve name (String)
getECCCurveName() {
  if [[ "$size" == "384" ]] ; then
    echo "secp384r1"
  else
    echo "prime256v1"
  fi
}

# Check if installed OpenSSL version supports given protocol
#
# 1: Protocol (String)
#
# Code: Yes
# Echo: No
isProtocolSupported() {
  openssl ciphers -v | tr -s " " | cut -f2 -d" " | grep -q "$1"
  return $?
}

# Create temporary file
#
# Code: No
# Echo: Yes
createTempFile() {
  local tmp_file

  tmp_file=$(mktemp "$TMP_PATTERN")
  chmod 0600 "$tmp_file"

  echo "$tmp_file"
}

# INT/TERM signal handler
#
# Code: No
# Echo: No
sigExitTrap() {
  doExit 1
}

# Remove temporary data and exit with given exit code
#
# 1: Exit code (Number) [Optional]
#
# Code: No
# Echo: No
doExit() {
  local ec="${1:-0}"

  rm -f ${TMP_PATTERN//X/}*

  exit "$ec"
}

################################################################################

# Show message
#
# 1: Message (String)
# 2: Message color (Number) [Optional]
#
# Code: No
# Echo: No
show() {
  if [[ -n "$2" && -z "$no_colors" ]] ; then
    echo -e "\e[${2}m${1}\e[0m"
  else
    echo -e "$*"
  fi
}

# Print error message
#
# 1: Message (String)
# 2: Message color (Number) [Optional]
#
# Code: No
# Echo: No
error() {
  show "$@" $RED 1>&2
}

# Print usage info
#
# Code: No
# Echo: No
usage() {
  show ""
  show "${CL_BOLD}Usage:${CL_NORM} web-utils ${CL_YELLOW}command${CL_NORM} ${CL_GREY}args…${CL_NORM}"
  show ""
  show "Commands" $BOLD
  show ""

  if [[ -n "$DARK" ]] ; then
    show "${CL_DARK}┌ ${CL_YELLOW}csr-gen${CL_NORM} ${CL_GREY}host${CL_NORM} ${CL_DARK}......................${CL_NORM} Generate key and a certificate signing request"
    show "${CL_DARK}└ ${CL_YELLOW}csr-gen${CL_NORM} ${CL_GREY}config${CL_NORM} ${CL_DARK}....................${CL_NORM} Generate key and a certificate signing request from OpenSSL configuration file"
    show "  ${CL_YELLOW}csr-info${CL_NORM} ${CL_GREY}csr${CL_NORM} ${CL_DARK}......................${CL_NORM} Print info from certificate signing request"
    show "  ${CL_YELLOW}csr-config-gen${CL_NORM} ${CL_GREY}host${CL_NORM} ${CL_DARK}...............${CL_NORM} Generate OpenSSL configuration file for certificate signing request generation"
    show "  ${CL_YELLOW}crt-info${CL_NORM} ${CL_GREY}crt${CL_NORM} ${CL_DARK}......................${CL_NORM} Print info from certificate"
    show "${CL_DARK}┌ ${CL_YELLOW}hpkp-gen${CL_NORM} ${CL_GREY}csr backup${CL_NORM} ${CL_DARK}...............${CL_NORM} Generate HTTP public key pinning (HPKP) header from CSR file"
    show "${CL_DARK}│ ${CL_YELLOW}hpkp-gen${CL_NORM} ${CL_GREY}key backup${CL_NORM} ${CL_DARK}...............${CL_NORM} Generate HTTP public key pinning (HPKP) header from KEY file"
    show "${CL_DARK}└ ${CL_YELLOW}hpkp-gen${CL_NORM} ${CL_GREY}crt backup${CL_NORM} ${CL_DARK}...............${CL_NORM} Generate HTTP public key pinning (HPKP) header from CRT file"
    show "${CL_DARK}┌ ${CL_YELLOW}ocsp-gen${CL_NORM} ${CL_GREY}server-cert${CL_NORM} ${CL_GREY}issuer-cert${CL_NORM} ${CL_DARK}..${CL_NORM} Generate OCSP stapling file from server certificate"
    show "${CL_DARK}└ ${CL_YELLOW}ocsp-gen${CL_NORM} ${CL_GREY}cert-chain${CL_NORM} ${CL_DARK}...............${CL_NORM} Generate OCSP stapling file from server certificate chain"
    show "  ${CL_YELLOW}ocsp-check${CL_NORM} ${CL_GREY}host${CL_NORM} ${CL_DARK}server-name${CL_NORM} ${CL_DARK}.......${CL_NORM} Check OCSP response status for some host"
    show "  ${CL_YELLOW}0rtt-check${CL_NORM} ${CL_GREY}host${CL_NORM} ${CL_DARK}server-name${CL_NORM} ${CL_DARK}.......${CL_NORM} Check 0-RTT support"
    show "  ${CL_YELLOW}htpasswd${CL_NORM} ${CL_GREY}user password${CL_NORM} ${CL_DARK}............${CL_NORM} Generate record with MD5 password hash for .htpasswd files"
  else
    show "┌ csr-gen host                        Generate key and a certificate signing request"
    show "└ csr-gen config                      Generate key and a certificate signing request from OpenSSL configuration file"
    show "  csr-info csr                        Print info from certificate signing request"
    show "  csr-config-gen host                 Generate OpenSSL configuration file for certificate signing request generation"
    show "  crt-info crt                        Print info from certificate"
    show "┌ hpkp-gen csr backup                 Generate HTTP public key pinning (HPKP) header from CSR file"
    show "│ hpkp-gen key backup                 Generate HTTP public key pinning (HPKP) header from KEY file"
    show "└ hpkp-gen crt backup                 Generate HTTP public key pinning (HPKP) header from CRT file"
    show "┌ ocsp-gen server-cert issuer-cert    Generate OCSP stapling file from server certificate"
    show "└ ocsp-gen cert-chain                 Generate OCSP stapling file from server certificate chain"
    show "  ocsp-check host server-name         Check OCSP response status for some host"
    show "  0rtt-check host server-name         Check 0-RTT support"
    show "  htpasswd user password              Generate record with MD5 password hash for .htpasswd files"
  fi

  show ""
  show "Options" $BOLD
  show ""
  
  if [[ -n "$DARK" ]] ; then
    show "  ${CL_GREEN}--ecc, -E${CL_NORM} ${CL_DARK}........${CL_NORM} Generate ECC certificate signing request"
    show "  ${CL_GREEN}--size, -S ${CL_GREY}size${CL_NORM} ${CL_DARK}..${CL_NORM} Key size ${CL_DARK}(ECC: $MIN_ECC_SIZE-$MAX_ECC_SIZE / RSA: $MIN_RSA_SIZE-$MAX_RSA_SIZE)${CL_NORM}"
    show "  ${CL_GREEN}--help, -h${CL_NORM} ${CL_DARK}.......${CL_NORM} Show this help message"
    show "  ${CL_GREEN}--version, -v${CL_NORM} ${CL_DARK}....${CL_NORM} Show information about version"
  else
    show "  --ecc, -E        Generate ECC certificate signing request"
    show "  --size, -s size  Key size (ECC: $MIN_ECC_SIZE-$MAX_ECC_SIZE / RSA: $MIN_RSA_SIZE-$MAX_RSA_SIZE)"
    show "  --help, -h       Show this help message"
    show "  --version, -v    Show information about version"
  fi

  show ""
  show "Examples" $BOLD
  show ""
  show "  web-utils csr-gen domain.com"
  show "  Generate RSA key and a certificate signing request for domain.com" $DARK
  show ""
  show "  web-utils hpkp-gen domain.com.csr domain.com.backup.key"
  show "  Generate HTTP public key pinning (HPKP) header with server and backup pins" $DARK
  show ""
  show "  web-utils ocsp-gen sever.crt issuer.crt"
  show "  Generate OCSP stapling file using server and issuer certificates" $DARK
  show ""
  show "  web-utils ocsp-gen sever-chain.crt"
  show "  Generate OCSP stapling file using certificate chain" $DARK
  show ""
  show "  web-utils ocsp-check essentialkaos.com"
  show "  Check OCSP response status for essentialkaos.com" $DARK
  show ""
}

# Show info about version
#
# Code: No
# Echo: No
about() {
  show ""
  show "${CL_BL_CYAN}$APP${CL_NORM} ${CL_CYAN}$VER${CL_NORM} - Helpers for working with web server"
  show ""
  show "Copyright (C) 2009-$(date +%Y) ESSENTIAL KAOS" $DARK
  show "Apache License, Version 2.0 <https://www.apache.org/licenses/LICENSE-2.0>" $DARK
  show ""
}

# Show warning message about unsupported option
#
# 1: Option name (String)
#
# Code: No
# Echo: No
showOptWarn() {
  error "Unknown option ${CL_BL_RED}${1}${CL_NORM}"
  exit 1
}

## OPTIONS PARSING 5 ###########################################################

if [[ $# -eq 0 ]] ; then
  main
  exit $?
fi

unset opt optn optm optv optt optk

optv="$*" ; optt=""

while [[ -n "$1" ]] ; do
  if [[ "$1" =~ \  && -n "$optn" ]] ; then
    declare "$optn=$1"

    unset optn && shift && continue
  elif [[ $1 =~ ^-{1}[a-zA-Z0-9]{1,2}+.*$ ]] ; then
    optm=${1:1}

    if [[ \ $SHORT_OPTS\  =~ \ $optm:!?([a-zA-Z0-9_]*) ]] ; then
      opt="${BASH_REMATCH[1]}"
    else
      declare -F showOptWarn &>/dev/null && showOptWarn "-$optm"
      shift && continue
    fi

    if [[ -z "$optn" ]] ; then
      optn=$opt
    else
      # shellcheck disable=SC2015
      [[ -z "$optk" ]] && ( declare -F showOptValWarn &>/dev/null && showOptValWarn "--$optn" ) || declare "$optn=true"
      optn=$opt
    fi

    if [[ ! $SUPPORTED_OPTS\  =~ !?$optn\  ]] ; then
      declare -F showOptWarn &>/dev/null && showOptWarn "-$optm"
      shift && continue
    fi

    if [[ ${BASH_REMATCH[0]:0:1} == "!" ]] ; then
      declare "$optn=true" ; unset optn ; optk=true
    else
      unset optk
    fi

    shift && continue
  elif [[ "$1" =~ ^-{2}[a-zA-Z]{1}[a-zA-Z0-9_-]+.*$ ]] ; then
    opt=${1:2}

    if [[ $opt == *=* ]] ; then
      IFS="=" read -ra opt <<< "$opt"

      optm="${opt[0]}" ; optm=${optm//-/_}

      if [[ ! $SUPPORTED_OPTS\  =~ $optm\  ]] ; then
        declare -F showOptWarn &>/dev/null && showOptWarn "--${opt[0]//_/-}"
        shift && continue
      fi

      # shellcheck disable=SC2015
      [[ -n "${!optm}" && $MERGEABLE_OPTS\  =~ $optm\  ]] && declare "$optm=${!optm} ${opt[*]:1:99}" || declare "$optm=${opt[*]:1:99}"

      unset optm && shift && continue
    else
      # shellcheck disable=SC2178
      opt=${opt//-/_}

      if [[ -z "$optn" ]] ; then
        # shellcheck disable=SC2128
        optn=$opt
      else
        # shellcheck disable=SC2015
        [[ -z "$optk" ]] && ( declare -F showOptValWarn &>/dev/null && showOptValWarn "--$optn" ) || declare "$optn=true"
        # shellcheck disable=SC2128
        optn=$opt
      fi

      if [[ ! $SUPPORTED_OPTS\  =~ !?$optn\  ]] ; then
        declare -F showOptWarn &>/dev/null && showOptWarn "--${optn//_/-}"
        shift && continue
      fi

      if [[ ${BASH_REMATCH[0]:0:1} == "!" ]] ; then
        declare "$optn=true" ; unset optn ; optk=true
      else
        unset optk
      fi

      shift && continue
    fi
  else
    if [[ -n "$optn" ]] ; then
      # shellcheck disable=SC2015
      [[ -n "${!optn}" && $MERGEABLE_OPTS\  =~ $optn\  ]] && declare "$optn=${!optn} $1" || declare "$optn=$1"

      unset optn && shift && continue
    fi
  fi

  optt="$optt $1" ; shift
done

[[ -n "$optn" ]] && declare "$optn=true"

unset opt optn optm optk

# shellcheck disable=SC2015,SC2086
[[ -n "$KEEP_OPTS" ]] && main $optv || main ${optt:1}

################################################################################
